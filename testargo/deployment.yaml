## delete after testing
# This file is used to deploy a PostgreSQL database for Confluence using Kubernetes.
# It includes a StatefulSet for PostgreSQL, a Service to expose it, and a StorageClass for persistent storage.

## 5GcBipbONhyS1nce  ( This is argocd intitial password)
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: postgres
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: postgres
#   template:
#     metadata:
#       labels:
#         app: postgres
#     spec:
#       containers:
#         - name: postgres
#           image: postgres:10.1
#           imagePullPolicy: "IfNotPresent"
#           ports:
#             - containerPort: 5432
#           env:
#             - name: POSTGRES_USER
#               value: "confluence"
#             - name: POSTGRES_PASSWORD
#               value: "confluencepass"
#             - name: POSTGRES_DB
#               value: "confluence_db"
#           volumeMounts:
#             - mountPath: /var/lib/postgresql/data
#               name: postgredb
#       volumes:
#         - name: postgredb
#           persistentVolumeClaim:
#             claimName: postgres-pv-claim

# ---

# apiVersion: v1
# kind: Service
# metadata:
#   name: postgres
#   labels:
#     app: postgres
# spec:
#   type: NodePort
#   ports:
#    - port: 5432
#   selector:
#    app: postgres

# ---
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: postgres
# spec:
#   serviceName: "postgres"
#   replicas: 1  # Only one primary instance for now
#   selector:
#     matchLabels:
#       app: postgres
#   template:
#     metadata:
#       labels:
#         app: postgres
#     spec:
#       containers:
#         - name: postgres
#           image: postgres:10.1
#           imagePullPolicy: "IfNotPresent"
#           ports:
#             - containerPort: 5432
#           env:
#             - name: POSTGRES_USER
#               value: "confluence"
#             - name: POSTGRES_PASSWORD
#               value: "confluencepass"
#             - name: POSTGRES_DB
#               value: "confluence_db"
#             - name: PGDATA  # ðŸ‘ˆ FIX: Ensuring PostgreSQL uses a subdirectory
#               value: "/var/lib/postgresql/data/pgdata"
#           volumeMounts:
#             - mountPath: /var/lib/postgresql/data
#               name: postgredb
#       volumes:
#         - name: postgredb
#           persistentVolumeClaim:
#             claimName: postgres-pv-claim


# ---
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: postgres
# spec:
#   serviceName: "postgres"
#   replicas: 1  # Only one primary instance for now
#   selector:
#     matchLabels:
#       app: postgres
#   template:
#     metadata:
#       labels:
#         app: postgres
#     spec:
#       containers:
#         - name: postgres
#           image: postgres:10.1
#           imagePullPolicy: "IfNotPresent"
#           ports:
#             - containerPort: 5432
#           env:
#             - name: POSTGRES_USER
#               value: "confluence"
#             - name: POSTGRES_PASSWORD
#               value: "confluencepass"
#             - name: POSTGRES_DB
#               value: "confluence_db"
#             - name: PGDATA
#               value: "/var/lib/postgresql/data/pgdata"
#           volumeMounts:
#             - mountPath: /var/lib/postgresql/data
#               name: postgredb  # ðŸ”¹ This must match `volumeClaimTemplates` name

#   volumeClaimTemplates:
#     - metadata:
#         name: postgredb  # ðŸ”¹ Matches `volumeMounts` name
#       spec:
#         accessModes: ["ReadWriteOnce"]
#         resources:
#           requests:
#             storage: 40Gi
#         storageClassName: gp2  # Use the existing StorageClass in your cluster

            

# ---

# apiVersion: v1
# kind: Service
# metadata:
#   name: postgres
#   labels:
#     app: postgres
# spec:
#   type: NodePort
#   ports:
#     - port: 5432
#       targetPort: 5432
#       nodePort: 32000  # Static NodePort for stable external access
#   selector:
#     app: postgres



# ---
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#   name: gp2-zonal
# provisioner: ebs.csi.aws.com
# parameters:
#   type: gp2
#   zone: ap-south-1a  # ðŸ”¹ Change this to match your node's zone
# volumeBindingMode: WaitForFirstConsumer

# ---
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: postgres
# spec:
#   serviceName: "postgres"
#   replicas: 1  # Only one primary instance for now
#   selector:
#     matchLabels:
#       app: postgres
#   template:
#     metadata:
#       labels:
#         app: postgres
#     spec:
#       containers:
#         - name: postgres
#           image: postgres:10.1
#           imagePullPolicy: "IfNotPresent"
#           ports:
#             - containerPort: 5432
#           env:
#             - name: POSTGRES_USER
#               value: "confluence"
#             - name: POSTGRES_PASSWORD
#               value: "confluencepass"
#             - name: POSTGRES_DB
#               value: "confluence_db"
#             - name: PGDATA
#               value: "/var/lib/postgresql/data/pgdata"
#           volumeMounts:
#             - mountPath: /var/lib/postgresql/data
#               name: postgredb  # ðŸ”¹ This must match `volumeClaimTemplates` name

#   volumeClaimTemplates:
#     - metadata:
#         name: postgredb  # ðŸ”¹ Matches `volumeMounts` name
#       spec:
#         accessModes: ["ReadWriteOnce"]
#         resources:
#           requests:
#             storage: 40Gi
#         storageClassName: gp2-zonal  # ðŸ”¹ Use the new StorageClass here

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: postgres
#   labels:
#     app: postgres
# spec:
#   type: NodePort
#   ports:
#     - port: 5432
#       targetPort: 5432
#       nodePort: 32000  # Static NodePort for stable external access
#   selector:
#     app: postgres



# ---
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#   name: gp3
# provisioner: kubernetes.io/aws-ebs
# parameters:
#   fsType: ext4
#   type: gp3
# reclaimPolicy: Delete
# volumeBindingMode: Immediate  # ðŸ”¹ Changed from WaitForFirstConsumer

# ---
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: postgres
# spec:
#   serviceName: "postgres"
#   replicas: 1  # Only one primary instance for now
#   selector:
#     matchLabels:
#       app: postgres
#   template:
#     metadata:
#       labels:
#         app: postgres
#     spec:
#       containers:
#         - name: postgres
#           image: postgres:10.1
#           imagePullPolicy: "IfNotPresent"
#           ports:
#             - containerPort: 5432
#           env:
#             - name: POSTGRES_USER
#               value: "confluence"
#             - name: POSTGRES_PASSWORD
#               value: "confluencepass"
#             - name: POSTGRES_DB
#               value: "confluence_db"
#             - name: PGDATA
#               value: "/var/lib/postgresql/data/pgdata"
#           volumeMounts:
#             - mountPath: /var/lib/postgresql/data
#               name: postgredb  # ðŸ”¹ Matches `volumeClaimTemplates` name

#   volumeClaimTemplates:
#     - metadata:
#         name: postgredb  # ðŸ”¹ Matches `volumeMounts` name
#       spec:
#         accessModes: ["ReadWriteOnce"]
#         resources:
#           requests:
#             storage: 40Gi
#         storageClassName: gp3  # Use the modified StorageClass

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: postgres
#   labels:
#     app: postgres
# spec:
#   type: NodePort
#   ports:
#     - port: 5432
#       targetPort: 5432
#       nodePort: 32000  # Static NodePort for stable external access
#   selector:
#     app: postgres



 # âœ… Prevents topology mismatch issues
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gp3
provisioner: ebs.csi.aws.com
parameters:
  type: gp3
  fsType: ext4
  topologyAware: "true"  # âœ… Ensure topology awareness
allowedTopologies:
  - matchLabelExpressions:
      - key: topology.kubernetes.io/zone
        values:
          - ap-south-1a
          - ap-south-1b
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: "postgres"
  replicas: 1  # Only one primary instance for now
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:10.1
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "confluence"
            - name: POSTGRES_PASSWORD
              value: "confluencepass"
            - name: POSTGRES_DB
              value: "confluence_db"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb  # âœ… Matches `volumeClaimTemplates` name

  volumeClaimTemplates:
    - metadata:
        name: postgredb  # âœ… Matches `volumeMounts` name
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 40Gi
        storageClassName: gp3  # âœ… Use the corrected StorageClass

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
    - port: 5432
      targetPort: 5432
      nodePort: 32000  # Static NodePort for stable external access
  selector:
    app: postgres
